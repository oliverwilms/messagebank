ZSTU
	Try {
		Set zstu = $Increment(^TESTzstu)
		Set ^TESTzstu(zstu) = $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : "_"ZSTU"
		Set tHost = $SYSTEM.INetInfo.LocalHostName()  // ip-10-999-999-999.us-gov-west-1.compute.internal
		Set ^TESTzstu(zstu) = ^TESTzstu(zstu)_" "_tHost
		Write $ZDateTime($NOW(),8,1,3)_" : "_$JOB_" : ZSTU LocalHostName = "_tHost,!
		Kill pVars
		Set pVars("MirrorName") = "IRISMIRROR"
		Set pVars("MirrorPath") = "DMLSS_DB"  // DataServer database name
		Set pVars = $$primaryget()
		Set temp = $ZCONVERT($Get(pVars),"l")
		Set ECPProperties("Address") = $Get(pVars("Address"),pVars)
		Set ECPProperties("MirrorConnection") = $Get(pVars("MirrorConnection"),1)
		Set ECPProperties("Port") = $Get(pVars("Port"),51773)
		Set pECPServerName = $Get(pVars("ServerName"),"DMLSS_DBR")
		Set tExists = ##class(Config.ECPServers).Exists(pECPServerName,.obj,.tSC)
		If tExists {
			Set tSC = ##class(Config.ECPServers).Modify(pECPServerName,.ECPProperties)
		} Else {
			Set tSC = ##class(Config.ECPServers).Create(pECPServerName,.ECPProperties)
		}
		zw ECPProperties
		Set msg = $System.Status.GetOneErrorText(tSC)
		Set ^TESTzstu(zstu,$I(^TESTzstu(zstu,0))) = msg
		Write msg,!
		//
		Set pDatabaseName = $Get(pVars("DatabaseName"),"DMLSS_DBR")
		Set pMirrorName = $Get(pVars("MirrorName"),"IRISMIRROE")
		Set pMirrorPath = $Get(pVars("MirrorPath"),"DMLSS_DB")
		Set DBProperties("Server") = pECPServerName
		Set DBProperties("Directory") = ":mirror:"_pMirrorName_":"_pMirrorPath
		Set tExists = ##class(Config.Databases).Exists(pDatabaseName,.obj,.tSC)
		If tExists {
			//Set tSC = ##class(Config.Databases).Modify(pDatabaseName,.DBProperties)
		} Else {
			Set tSC = ##class(Config.Databases).Create(pDatabaseName,.DBProperties)
		}
		zw DBProperties
		Set msg = $System.Status.GetOneErrorText(tSC)
		Set ^TESTzstu(zstu,$I(^TESTzstu(zstu,0))) = msg
		Write msg,!
	}
	Catch {
		Quit
	}
	Quit
	;
primaryget() PUBLIC {
	set primaryfile = "/ICS/mirror/primary"
	// How long should we wait for Primary to be ready?
	set timeout = 300
	open primaryfile:("R"):timeout  // read
	if $test {
		use primaryfile
		read host
		close primaryfile
	}
	quit $get(host)
}
